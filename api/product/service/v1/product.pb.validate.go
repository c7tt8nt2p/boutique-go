// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/product.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _product_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductReqMultiError, or nil if none found.
func (m *CreateProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProductReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 5 {
		err := CreateProductReqValidationError{
			field:  "Description",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStock() <= 0 {
		err := CreateProductReqValidationError{
			field:  "Stock",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUnitPrice() <= 0 {
		err := CreateProductReqValidationError{
			field:  "UnitPrice",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProductReqMultiError(errors)
	}

	return nil
}

// CreateProductReqMultiError is an error wrapping multiple validation errors
// returned by CreateProductReq.ValidateAll() if the designated constraints
// aren't met.
type CreateProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductReqMultiError) AllErrors() []error { return m }

// CreateProductReqValidationError is the validation error returned by
// CreateProductReq.Validate if the designated constraints aren't met.
type CreateProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductReqValidationError) ErrorName() string { return "CreateProductReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductReqValidationError{}

// Validate checks the field values on CreateProductResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRespMultiError, or nil if none found.
func (m *CreateProductResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Stock

	// no validation rules for UnitPrice

	if len(errors) > 0 {
		return CreateProductRespMultiError(errors)
	}

	return nil
}

// CreateProductRespMultiError is an error wrapping multiple validation errors
// returned by CreateProductResp.ValidateAll() if the designated constraints
// aren't met.
type CreateProductRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRespMultiError) AllErrors() []error { return m }

// CreateProductRespValidationError is the validation error returned by
// CreateProductResp.Validate if the designated constraints aren't met.
type CreateProductRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRespValidationError) ErrorName() string {
	return "CreateProductRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRespValidationError{}

// Validate checks the field values on GetProductReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProductReqMultiError, or
// nil if none found.
func (m *GetProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetProductReqValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductReqMultiError(errors)
	}

	return nil
}

func (m *GetProductReq) _validateUuid(uuid string) error {
	if matched := _product_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetProductReqMultiError is an error wrapping multiple validation errors
// returned by GetProductReq.ValidateAll() if the designated constraints
// aren't met.
type GetProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductReqMultiError) AllErrors() []error { return m }

// GetProductReqValidationError is the validation error returned by
// GetProductReq.Validate if the designated constraints aren't met.
type GetProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductReqValidationError) ErrorName() string { return "GetProductReqValidationError" }

// Error satisfies the builtin error interface
func (e GetProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductReqValidationError{}

// Validate checks the field values on GetProductResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProductResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProductRespMultiError,
// or nil if none found.
func (m *GetProductResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Stock

	// no validation rules for UnitPrice

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductRespValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductRespValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductRespValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductRespValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductRespValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductRespValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductRespMultiError(errors)
	}

	return nil
}

// GetProductRespMultiError is an error wrapping multiple validation errors
// returned by GetProductResp.ValidateAll() if the designated constraints
// aren't met.
type GetProductRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductRespMultiError) AllErrors() []error { return m }

// GetProductRespValidationError is the validation error returned by
// GetProductResp.Validate if the designated constraints aren't met.
type GetProductRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRespValidationError) ErrorName() string { return "GetProductRespValidationError" }

// Error satisfies the builtin error interface
func (e GetProductRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRespValidationError{}

// Validate checks the field values on UpdateProductStockReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductStockReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductStockReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductStockReqMultiError, or nil if none found.
func (m *UpdateProductStockReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductStockReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateProductStockReqValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStock() <= 0 {
		err := UpdateProductStockReqValidationError{
			field:  "Stock",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateProductStockReqMultiError(errors)
	}

	return nil
}

func (m *UpdateProductStockReq) _validateUuid(uuid string) error {
	if matched := _product_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateProductStockReqMultiError is an error wrapping multiple validation
// errors returned by UpdateProductStockReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductStockReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductStockReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductStockReqMultiError) AllErrors() []error { return m }

// UpdateProductStockReqValidationError is the validation error returned by
// UpdateProductStockReq.Validate if the designated constraints aren't met.
type UpdateProductStockReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductStockReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductStockReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductStockReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductStockReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductStockReqValidationError) ErrorName() string {
	return "UpdateProductStockReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductStockReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductStockReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductStockReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductStockReqValidationError{}

// Validate checks the field values on UpdateProductStockResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductStockResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductStockResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductStockRespMultiError, or nil if none found.
func (m *UpdateProductStockResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductStockResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Stock

	if len(errors) > 0 {
		return UpdateProductStockRespMultiError(errors)
	}

	return nil
}

// UpdateProductStockRespMultiError is an error wrapping multiple validation
// errors returned by UpdateProductStockResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductStockRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductStockRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductStockRespMultiError) AllErrors() []error { return m }

// UpdateProductStockRespValidationError is the validation error returned by
// UpdateProductStockResp.Validate if the designated constraints aren't met.
type UpdateProductStockRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductStockRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductStockRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductStockRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductStockRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductStockRespValidationError) ErrorName() string {
	return "UpdateProductStockRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductStockRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductStockResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductStockRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductStockRespValidationError{}

// Validate checks the field values on SubtractProductStockReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubtractProductStockReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubtractProductStockReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubtractProductStockReqMultiError, or nil if none found.
func (m *SubtractProductStockReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubtractProductStockReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = SubtractProductStockReqValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSubtractStock() <= 0 {
		err := SubtractProductStockReqValidationError{
			field:  "SubtractStock",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubtractProductStockReqMultiError(errors)
	}

	return nil
}

func (m *SubtractProductStockReq) _validateUuid(uuid string) error {
	if matched := _product_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SubtractProductStockReqMultiError is an error wrapping multiple validation
// errors returned by SubtractProductStockReq.ValidateAll() if the designated
// constraints aren't met.
type SubtractProductStockReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubtractProductStockReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubtractProductStockReqMultiError) AllErrors() []error { return m }

// SubtractProductStockReqValidationError is the validation error returned by
// SubtractProductStockReq.Validate if the designated constraints aren't met.
type SubtractProductStockReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubtractProductStockReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubtractProductStockReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubtractProductStockReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubtractProductStockReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubtractProductStockReqValidationError) ErrorName() string {
	return "SubtractProductStockReqValidationError"
}

// Error satisfies the builtin error interface
func (e SubtractProductStockReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubtractProductStockReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubtractProductStockReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubtractProductStockReqValidationError{}

// Validate checks the field values on SubtractProductStockResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubtractProductStockResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubtractProductStockResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubtractProductStockRespMultiError, or nil if none found.
func (m *SubtractProductStockResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SubtractProductStockResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Stock

	if len(errors) > 0 {
		return SubtractProductStockRespMultiError(errors)
	}

	return nil
}

// SubtractProductStockRespMultiError is an error wrapping multiple validation
// errors returned by SubtractProductStockResp.ValidateAll() if the designated
// constraints aren't met.
type SubtractProductStockRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubtractProductStockRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubtractProductStockRespMultiError) AllErrors() []error { return m }

// SubtractProductStockRespValidationError is the validation error returned by
// SubtractProductStockResp.Validate if the designated constraints aren't met.
type SubtractProductStockRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubtractProductStockRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubtractProductStockRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubtractProductStockRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubtractProductStockRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubtractProductStockRespValidationError) ErrorName() string {
	return "SubtractProductStockRespValidationError"
}

// Error satisfies the builtin error interface
func (e SubtractProductStockRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubtractProductStockResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubtractProductStockRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubtractProductStockRespValidationError{}

// Validate checks the field values on ValidatePurchasableProductReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidatePurchasableProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidatePurchasableProductReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidatePurchasableProductReqMultiError, or nil if none found.
func (m *ValidatePurchasableProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidatePurchasableProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ValidatePurchasableProductReqValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQty() <= 0 {
		err := ValidatePurchasableProductReqValidationError{
			field:  "Qty",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ValidatePurchasableProductReqMultiError(errors)
	}

	return nil
}

func (m *ValidatePurchasableProductReq) _validateUuid(uuid string) error {
	if matched := _product_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ValidatePurchasableProductReqMultiError is an error wrapping multiple
// validation errors returned by ValidatePurchasableProductReq.ValidateAll()
// if the designated constraints aren't met.
type ValidatePurchasableProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidatePurchasableProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidatePurchasableProductReqMultiError) AllErrors() []error { return m }

// ValidatePurchasableProductReqValidationError is the validation error
// returned by ValidatePurchasableProductReq.Validate if the designated
// constraints aren't met.
type ValidatePurchasableProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidatePurchasableProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidatePurchasableProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidatePurchasableProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidatePurchasableProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidatePurchasableProductReqValidationError) ErrorName() string {
	return "ValidatePurchasableProductReqValidationError"
}

// Error satisfies the builtin error interface
func (e ValidatePurchasableProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidatePurchasableProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidatePurchasableProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidatePurchasableProductReqValidationError{}

// Validate checks the field values on ValidatePurchasableProductResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidatePurchasableProductResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidatePurchasableProductResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidatePurchasableProductRespMultiError, or nil if none found.
func (m *ValidatePurchasableProductResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidatePurchasableProductResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Validated

	// no validation rules for ValidationMessage

	if len(errors) > 0 {
		return ValidatePurchasableProductRespMultiError(errors)
	}

	return nil
}

// ValidatePurchasableProductRespMultiError is an error wrapping multiple
// validation errors returned by ValidatePurchasableProductResp.ValidateAll()
// if the designated constraints aren't met.
type ValidatePurchasableProductRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidatePurchasableProductRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidatePurchasableProductRespMultiError) AllErrors() []error { return m }

// ValidatePurchasableProductRespValidationError is the validation error
// returned by ValidatePurchasableProductResp.Validate if the designated
// constraints aren't met.
type ValidatePurchasableProductRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidatePurchasableProductRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidatePurchasableProductRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidatePurchasableProductRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidatePurchasableProductRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidatePurchasableProductRespValidationError) ErrorName() string {
	return "ValidatePurchasableProductRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidatePurchasableProductRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidatePurchasableProductResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidatePurchasableProductRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidatePurchasableProductRespValidationError{}
