// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _auth_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on NewAuthReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewAuthReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewAuthReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewAuthReqMultiError, or
// nil if none found.
func (m *NewAuthReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NewAuthReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = NewAuthReqValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 5 || l > 20 {
		err := NewAuthReqValidationError{
			field:  "Password",
			reason: "value length must be between 5 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NewAuthReqMultiError(errors)
	}

	return nil
}

func (m *NewAuthReq) _validateUuid(uuid string) error {
	if matched := _auth_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// NewAuthReqMultiError is an error wrapping multiple validation errors
// returned by NewAuthReq.ValidateAll() if the designated constraints aren't met.
type NewAuthReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewAuthReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewAuthReqMultiError) AllErrors() []error { return m }

// NewAuthReqValidationError is the validation error returned by
// NewAuthReq.Validate if the designated constraints aren't met.
type NewAuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewAuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewAuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewAuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewAuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewAuthReqValidationError) ErrorName() string { return "NewAuthReqValidationError" }

// Error satisfies the builtin error interface
func (e NewAuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewAuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewAuthReqValidationError{}

// Validate checks the field values on NewAuthResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewAuthResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewAuthResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewAuthRespMultiError, or
// nil if none found.
func (m *NewAuthResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NewAuthResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return NewAuthRespMultiError(errors)
	}

	return nil
}

// NewAuthRespMultiError is an error wrapping multiple validation errors
// returned by NewAuthResp.ValidateAll() if the designated constraints aren't met.
type NewAuthRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewAuthRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewAuthRespMultiError) AllErrors() []error { return m }

// NewAuthRespValidationError is the validation error returned by
// NewAuthResp.Validate if the designated constraints aren't met.
type NewAuthRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewAuthRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewAuthRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewAuthRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewAuthRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewAuthRespValidationError) ErrorName() string { return "NewAuthRespValidationError" }

// Error satisfies the builtin error interface
func (e NewAuthRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewAuthResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewAuthRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewAuthRespValidationError{}

// Validate checks the field values on DeleteAuthReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteAuthReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuthReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteAuthReqMultiError, or
// nil if none found.
func (m *DeleteAuthReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuthReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteAuthReqValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAuthReqMultiError(errors)
	}

	return nil
}

func (m *DeleteAuthReq) _validateUuid(uuid string) error {
	if matched := _auth_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAuthReqMultiError is an error wrapping multiple validation errors
// returned by DeleteAuthReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteAuthReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuthReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuthReqMultiError) AllErrors() []error { return m }

// DeleteAuthReqValidationError is the validation error returned by
// DeleteAuthReq.Validate if the designated constraints aren't met.
type DeleteAuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuthReqValidationError) ErrorName() string { return "DeleteAuthReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuthReqValidationError{}

// Validate checks the field values on DeleteAuthResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteAuthResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuthResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteAuthRespMultiError,
// or nil if none found.
func (m *DeleteAuthResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuthResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAuthRespMultiError(errors)
	}

	return nil
}

// DeleteAuthRespMultiError is an error wrapping multiple validation errors
// returned by DeleteAuthResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteAuthRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuthRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuthRespMultiError) AllErrors() []error { return m }

// DeleteAuthRespValidationError is the validation error returned by
// DeleteAuthResp.Validate if the designated constraints aren't met.
type DeleteAuthRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuthRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuthRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuthRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuthRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuthRespValidationError) ErrorName() string { return "DeleteAuthRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAuthRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuthResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuthRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuthRespValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 5 || l > 20 {
		err := LoginReqValidationError{
			field:  "Password",
			reason: "value length must be between 5 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

func (m *LoginReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on ValidateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ValidateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ValidateRespMultiError, or
// nil if none found.
func (m *ValidateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Email

	if len(errors) > 0 {
		return ValidateRespMultiError(errors)
	}

	return nil
}

// ValidateRespMultiError is an error wrapping multiple validation errors
// returned by ValidateResp.ValidateAll() if the designated constraints aren't met.
type ValidateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateRespMultiError) AllErrors() []error { return m }

// ValidateRespValidationError is the validation error returned by
// ValidateResp.Validate if the designated constraints aren't met.
type ValidateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateRespValidationError) ErrorName() string { return "ValidateRespValidationError" }

// Error satisfies the builtin error interface
func (e ValidateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateRespValidationError{}
