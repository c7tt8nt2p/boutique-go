// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/cartitem"
	"github.com/kx-boutique/ent/generated/checkout"
	"github.com/kx-boutique/ent/generated/checkoutitem"
)

// CheckoutItemCreate is the builder for creating a CheckoutItem entity.
type CheckoutItemCreate struct {
	config
	mutation *CheckoutItemMutation
	hooks    []Hook
}

// SetCheckoutID sets the "checkout_id" field.
func (cic *CheckoutItemCreate) SetCheckoutID(u uuid.UUID) *CheckoutItemCreate {
	cic.mutation.SetCheckoutID(u)
	return cic
}

// SetCartItemID sets the "cart_item_id" field.
func (cic *CheckoutItemCreate) SetCartItemID(u uuid.UUID) *CheckoutItemCreate {
	cic.mutation.SetCartItemID(u)
	return cic
}

// SetID sets the "id" field.
func (cic *CheckoutItemCreate) SetID(u uuid.UUID) *CheckoutItemCreate {
	cic.mutation.SetID(u)
	return cic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cic *CheckoutItemCreate) SetNillableID(u *uuid.UUID) *CheckoutItemCreate {
	if u != nil {
		cic.SetID(*u)
	}
	return cic
}

// SetCheckoutIDOwnerID sets the "checkout_id_owner" edge to the Checkout entity by ID.
func (cic *CheckoutItemCreate) SetCheckoutIDOwnerID(id uuid.UUID) *CheckoutItemCreate {
	cic.mutation.SetCheckoutIDOwnerID(id)
	return cic
}

// SetCheckoutIDOwner sets the "checkout_id_owner" edge to the Checkout entity.
func (cic *CheckoutItemCreate) SetCheckoutIDOwner(c *Checkout) *CheckoutItemCreate {
	return cic.SetCheckoutIDOwnerID(c.ID)
}

// SetCartItemIDOwnerID sets the "cart_item_id_owner" edge to the CartItem entity by ID.
func (cic *CheckoutItemCreate) SetCartItemIDOwnerID(id uuid.UUID) *CheckoutItemCreate {
	cic.mutation.SetCartItemIDOwnerID(id)
	return cic
}

// SetCartItemIDOwner sets the "cart_item_id_owner" edge to the CartItem entity.
func (cic *CheckoutItemCreate) SetCartItemIDOwner(c *CartItem) *CheckoutItemCreate {
	return cic.SetCartItemIDOwnerID(c.ID)
}

// Mutation returns the CheckoutItemMutation object of the builder.
func (cic *CheckoutItemCreate) Mutation() *CheckoutItemMutation {
	return cic.mutation
}

// Save creates the CheckoutItem in the database.
func (cic *CheckoutItemCreate) Save(ctx context.Context) (*CheckoutItem, error) {
	cic.defaults()
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CheckoutItemCreate) SaveX(ctx context.Context) *CheckoutItem {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CheckoutItemCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CheckoutItemCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CheckoutItemCreate) defaults() {
	if _, ok := cic.mutation.ID(); !ok {
		v := checkoutitem.DefaultID()
		cic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CheckoutItemCreate) check() error {
	if _, ok := cic.mutation.CheckoutID(); !ok {
		return &ValidationError{Name: "checkout_id", err: errors.New(`generated: missing required field "CheckoutItem.checkout_id"`)}
	}
	if _, ok := cic.mutation.CartItemID(); !ok {
		return &ValidationError{Name: "cart_item_id", err: errors.New(`generated: missing required field "CheckoutItem.cart_item_id"`)}
	}
	if _, ok := cic.mutation.CheckoutIDOwnerID(); !ok {
		return &ValidationError{Name: "checkout_id_owner", err: errors.New(`generated: missing required edge "CheckoutItem.checkout_id_owner"`)}
	}
	if _, ok := cic.mutation.CartItemIDOwnerID(); !ok {
		return &ValidationError{Name: "cart_item_id_owner", err: errors.New(`generated: missing required edge "CheckoutItem.cart_item_id_owner"`)}
	}
	return nil
}

func (cic *CheckoutItemCreate) sqlSave(ctx context.Context) (*CheckoutItem, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *CheckoutItemCreate) createSpec() (*CheckoutItem, *sqlgraph.CreateSpec) {
	var (
		_node = &CheckoutItem{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(checkoutitem.Table, sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID))
	)
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := cic.mutation.CheckoutIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutitem.CheckoutIDOwnerTable,
			Columns: []string{checkoutitem.CheckoutIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CheckoutID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.CartItemIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkoutitem.CartItemIDOwnerTable,
			Columns: []string{checkoutitem.CartItemIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CartItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CheckoutItemCreateBulk is the builder for creating many CheckoutItem entities in bulk.
type CheckoutItemCreateBulk struct {
	config
	err      error
	builders []*CheckoutItemCreate
}

// Save creates the CheckoutItem entities in the database.
func (cicb *CheckoutItemCreateBulk) Save(ctx context.Context) ([]*CheckoutItem, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CheckoutItem, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckoutItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CheckoutItemCreateBulk) SaveX(ctx context.Context) []*CheckoutItem {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CheckoutItemCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CheckoutItemCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
