// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/checkout"
	"github.com/kx-boutique/ent/generated/checkoutitem"
	"github.com/kx-boutique/ent/generated/predicate"
	"github.com/kx-boutique/ent/generated/user"
)

// CheckoutUpdate is the builder for updating Checkout entities.
type CheckoutUpdate struct {
	config
	hooks    []Hook
	mutation *CheckoutMutation
}

// Where appends a list predicates to the CheckoutUpdate builder.
func (cu *CheckoutUpdate) Where(ps ...predicate.Checkout) *CheckoutUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CheckoutUpdate) SetUserID(u uuid.UUID) *CheckoutUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetTotalPrice sets the "total_price" field.
func (cu *CheckoutUpdate) SetTotalPrice(f float64) *CheckoutUpdate {
	cu.mutation.ResetTotalPrice()
	cu.mutation.SetTotalPrice(f)
	return cu
}

// AddTotalPrice adds f to the "total_price" field.
func (cu *CheckoutUpdate) AddTotalPrice(f float64) *CheckoutUpdate {
	cu.mutation.AddTotalPrice(f)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CheckoutUpdate) SetCreatedAt(t time.Time) *CheckoutUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CheckoutUpdate) SetNillableCreatedAt(t *time.Time) *CheckoutUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// AddCheckoutItemIDs adds the "checkout_item" edge to the CheckoutItem entity by IDs.
func (cu *CheckoutUpdate) AddCheckoutItemIDs(ids ...uuid.UUID) *CheckoutUpdate {
	cu.mutation.AddCheckoutItemIDs(ids...)
	return cu
}

// AddCheckoutItem adds the "checkout_item" edges to the CheckoutItem entity.
func (cu *CheckoutUpdate) AddCheckoutItem(c ...*CheckoutItem) *CheckoutUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCheckoutItemIDs(ids...)
}

// SetUserIDOwnerID sets the "user_id_owner" edge to the User entity by ID.
func (cu *CheckoutUpdate) SetUserIDOwnerID(id uuid.UUID) *CheckoutUpdate {
	cu.mutation.SetUserIDOwnerID(id)
	return cu
}

// SetUserIDOwner sets the "user_id_owner" edge to the User entity.
func (cu *CheckoutUpdate) SetUserIDOwner(u *User) *CheckoutUpdate {
	return cu.SetUserIDOwnerID(u.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cu *CheckoutUpdate) Mutation() *CheckoutMutation {
	return cu.mutation
}

// ClearCheckoutItem clears all "checkout_item" edges to the CheckoutItem entity.
func (cu *CheckoutUpdate) ClearCheckoutItem() *CheckoutUpdate {
	cu.mutation.ClearCheckoutItem()
	return cu
}

// RemoveCheckoutItemIDs removes the "checkout_item" edge to CheckoutItem entities by IDs.
func (cu *CheckoutUpdate) RemoveCheckoutItemIDs(ids ...uuid.UUID) *CheckoutUpdate {
	cu.mutation.RemoveCheckoutItemIDs(ids...)
	return cu
}

// RemoveCheckoutItem removes "checkout_item" edges to CheckoutItem entities.
func (cu *CheckoutUpdate) RemoveCheckoutItem(c ...*CheckoutItem) *CheckoutUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCheckoutItemIDs(ids...)
}

// ClearUserIDOwner clears the "user_id_owner" edge to the User entity.
func (cu *CheckoutUpdate) ClearUserIDOwner() *CheckoutUpdate {
	cu.mutation.ClearUserIDOwner()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CheckoutUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CheckoutUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CheckoutUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CheckoutUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CheckoutUpdate) check() error {
	if _, ok := cu.mutation.UserIDOwnerID(); cu.mutation.UserIDOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Checkout.user_id_owner"`)
	}
	return nil
}

func (cu *CheckoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(checkout.Table, checkout.Columns, sqlgraph.NewFieldSpec(checkout.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.TotalPrice(); ok {
		_spec.SetField(checkout.FieldTotalPrice, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedTotalPrice(); ok {
		_spec.AddField(checkout.FieldTotalPrice, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(checkout.FieldCreatedAt, field.TypeTime, value)
	}
	if cu.mutation.CheckoutItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   checkout.CheckoutItemTable,
			Columns: []string{checkout.CheckoutItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCheckoutItemIDs(); len(nodes) > 0 && !cu.mutation.CheckoutItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   checkout.CheckoutItemTable,
			Columns: []string{checkout.CheckoutItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CheckoutItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   checkout.CheckoutItemTable,
			Columns: []string{checkout.CheckoutItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserIDOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.UserIDOwnerTable,
			Columns: []string{checkout.UserIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.UserIDOwnerTable,
			Columns: []string{checkout.UserIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CheckoutUpdateOne is the builder for updating a single Checkout entity.
type CheckoutUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CheckoutMutation
}

// SetUserID sets the "user_id" field.
func (cuo *CheckoutUpdateOne) SetUserID(u uuid.UUID) *CheckoutUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetTotalPrice sets the "total_price" field.
func (cuo *CheckoutUpdateOne) SetTotalPrice(f float64) *CheckoutUpdateOne {
	cuo.mutation.ResetTotalPrice()
	cuo.mutation.SetTotalPrice(f)
	return cuo
}

// AddTotalPrice adds f to the "total_price" field.
func (cuo *CheckoutUpdateOne) AddTotalPrice(f float64) *CheckoutUpdateOne {
	cuo.mutation.AddTotalPrice(f)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CheckoutUpdateOne) SetCreatedAt(t time.Time) *CheckoutUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CheckoutUpdateOne) SetNillableCreatedAt(t *time.Time) *CheckoutUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// AddCheckoutItemIDs adds the "checkout_item" edge to the CheckoutItem entity by IDs.
func (cuo *CheckoutUpdateOne) AddCheckoutItemIDs(ids ...uuid.UUID) *CheckoutUpdateOne {
	cuo.mutation.AddCheckoutItemIDs(ids...)
	return cuo
}

// AddCheckoutItem adds the "checkout_item" edges to the CheckoutItem entity.
func (cuo *CheckoutUpdateOne) AddCheckoutItem(c ...*CheckoutItem) *CheckoutUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCheckoutItemIDs(ids...)
}

// SetUserIDOwnerID sets the "user_id_owner" edge to the User entity by ID.
func (cuo *CheckoutUpdateOne) SetUserIDOwnerID(id uuid.UUID) *CheckoutUpdateOne {
	cuo.mutation.SetUserIDOwnerID(id)
	return cuo
}

// SetUserIDOwner sets the "user_id_owner" edge to the User entity.
func (cuo *CheckoutUpdateOne) SetUserIDOwner(u *User) *CheckoutUpdateOne {
	return cuo.SetUserIDOwnerID(u.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cuo *CheckoutUpdateOne) Mutation() *CheckoutMutation {
	return cuo.mutation
}

// ClearCheckoutItem clears all "checkout_item" edges to the CheckoutItem entity.
func (cuo *CheckoutUpdateOne) ClearCheckoutItem() *CheckoutUpdateOne {
	cuo.mutation.ClearCheckoutItem()
	return cuo
}

// RemoveCheckoutItemIDs removes the "checkout_item" edge to CheckoutItem entities by IDs.
func (cuo *CheckoutUpdateOne) RemoveCheckoutItemIDs(ids ...uuid.UUID) *CheckoutUpdateOne {
	cuo.mutation.RemoveCheckoutItemIDs(ids...)
	return cuo
}

// RemoveCheckoutItem removes "checkout_item" edges to CheckoutItem entities.
func (cuo *CheckoutUpdateOne) RemoveCheckoutItem(c ...*CheckoutItem) *CheckoutUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCheckoutItemIDs(ids...)
}

// ClearUserIDOwner clears the "user_id_owner" edge to the User entity.
func (cuo *CheckoutUpdateOne) ClearUserIDOwner() *CheckoutUpdateOne {
	cuo.mutation.ClearUserIDOwner()
	return cuo
}

// Where appends a list predicates to the CheckoutUpdate builder.
func (cuo *CheckoutUpdateOne) Where(ps ...predicate.Checkout) *CheckoutUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CheckoutUpdateOne) Select(field string, fields ...string) *CheckoutUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Checkout entity.
func (cuo *CheckoutUpdateOne) Save(ctx context.Context) (*Checkout, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CheckoutUpdateOne) SaveX(ctx context.Context) *Checkout {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CheckoutUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CheckoutUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CheckoutUpdateOne) check() error {
	if _, ok := cuo.mutation.UserIDOwnerID(); cuo.mutation.UserIDOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Checkout.user_id_owner"`)
	}
	return nil
}

func (cuo *CheckoutUpdateOne) sqlSave(ctx context.Context) (_node *Checkout, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(checkout.Table, checkout.Columns, sqlgraph.NewFieldSpec(checkout.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Checkout.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, checkout.FieldID)
		for _, f := range fields {
			if !checkout.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != checkout.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.TotalPrice(); ok {
		_spec.SetField(checkout.FieldTotalPrice, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedTotalPrice(); ok {
		_spec.AddField(checkout.FieldTotalPrice, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(checkout.FieldCreatedAt, field.TypeTime, value)
	}
	if cuo.mutation.CheckoutItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   checkout.CheckoutItemTable,
			Columns: []string{checkout.CheckoutItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCheckoutItemIDs(); len(nodes) > 0 && !cuo.mutation.CheckoutItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   checkout.CheckoutItemTable,
			Columns: []string{checkout.CheckoutItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CheckoutItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   checkout.CheckoutItemTable,
			Columns: []string{checkout.CheckoutItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserIDOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.UserIDOwnerTable,
			Columns: []string{checkout.UserIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.UserIDOwnerTable,
			Columns: []string{checkout.UserIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Checkout{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
