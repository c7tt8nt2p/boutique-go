// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCart holds the string denoting the cart edge name in mutations.
	EdgeCart = "cart"
	// EdgeAuth holds the string denoting the auth edge name in mutations.
	EdgeAuth = "auth"
	// EdgeCheckout holds the string denoting the checkout edge name in mutations.
	EdgeCheckout = "checkout"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CartTable is the table that holds the cart relation/edge.
	CartTable = "carts"
	// CartInverseTable is the table name for the Cart entity.
	// It exists in this package in order to avoid circular dependency with the "cart" package.
	CartInverseTable = "carts"
	// CartColumn is the table column denoting the cart relation/edge.
	CartColumn = "user_id"
	// AuthTable is the table that holds the auth relation/edge.
	AuthTable = "auths"
	// AuthInverseTable is the table name for the Auth entity.
	// It exists in this package in order to avoid circular dependency with the "auth" package.
	AuthInverseTable = "auths"
	// AuthColumn is the table column denoting the auth relation/edge.
	AuthColumn = "user_id"
	// CheckoutTable is the table that holds the checkout relation/edge.
	CheckoutTable = "checkouts"
	// CheckoutInverseTable is the table name for the Checkout entity.
	// It exists in this package in order to avoid circular dependency with the "checkout" package.
	CheckoutInverseTable = "checkouts"
	// CheckoutColumn is the table column denoting the checkout relation/edge.
	CheckoutColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCartField orders the results by cart field.
func ByCartField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCartStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthField orders the results by auth field.
func ByAuthField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthStep(), sql.OrderByField(field, opts...))
	}
}

// ByCheckoutCount orders the results by checkout count.
func ByCheckoutCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCheckoutStep(), opts...)
	}
}

// ByCheckout orders the results by checkout terms.
func ByCheckout(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCheckoutStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCartStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CartInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CartTable, CartColumn),
	)
}
func newAuthStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AuthTable, AuthColumn),
	)
}
func newCheckoutStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CheckoutInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CheckoutTable, CheckoutColumn),
	)
}
