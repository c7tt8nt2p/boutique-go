// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/cart"
	"github.com/kx-boutique/ent/generated/predicate"
	"github.com/kx-boutique/ent/generated/user"
	"github.com/kx-boutique/ent/generated/usercart"
)

// UserCartUpdate is the builder for updating UserCart entities.
type UserCartUpdate struct {
	config
	hooks    []Hook
	mutation *UserCartMutation
}

// Where appends a list predicates to the UserCartUpdate builder.
func (ucu *UserCartUpdate) Where(ps ...predicate.UserCart) *UserCartUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetUserID sets the "user_id" field.
func (ucu *UserCartUpdate) SetUserID(u uuid.UUID) *UserCartUpdate {
	ucu.mutation.SetUserID(u)
	return ucu
}

// SetUserOwnerID sets the "user_owner" edge to the User entity by ID.
func (ucu *UserCartUpdate) SetUserOwnerID(id uuid.UUID) *UserCartUpdate {
	ucu.mutation.SetUserOwnerID(id)
	return ucu
}

// SetUserOwner sets the "user_owner" edge to the User entity.
func (ucu *UserCartUpdate) SetUserOwner(u *User) *UserCartUpdate {
	return ucu.SetUserOwnerID(u.ID)
}

// AddCartIDs adds the "carts" edge to the Cart entity by IDs.
func (ucu *UserCartUpdate) AddCartIDs(ids ...uuid.UUID) *UserCartUpdate {
	ucu.mutation.AddCartIDs(ids...)
	return ucu
}

// AddCarts adds the "carts" edges to the Cart entity.
func (ucu *UserCartUpdate) AddCarts(c ...*Cart) *UserCartUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucu.AddCartIDs(ids...)
}

// Mutation returns the UserCartMutation object of the builder.
func (ucu *UserCartUpdate) Mutation() *UserCartMutation {
	return ucu.mutation
}

// ClearUserOwner clears the "user_owner" edge to the User entity.
func (ucu *UserCartUpdate) ClearUserOwner() *UserCartUpdate {
	ucu.mutation.ClearUserOwner()
	return ucu
}

// ClearCarts clears all "carts" edges to the Cart entity.
func (ucu *UserCartUpdate) ClearCarts() *UserCartUpdate {
	ucu.mutation.ClearCarts()
	return ucu
}

// RemoveCartIDs removes the "carts" edge to Cart entities by IDs.
func (ucu *UserCartUpdate) RemoveCartIDs(ids ...uuid.UUID) *UserCartUpdate {
	ucu.mutation.RemoveCartIDs(ids...)
	return ucu
}

// RemoveCarts removes "carts" edges to Cart entities.
func (ucu *UserCartUpdate) RemoveCarts(c ...*Cart) *UserCartUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucu.RemoveCartIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserCartUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserCartUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserCartUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserCartUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucu *UserCartUpdate) check() error {
	if _, ok := ucu.mutation.UserOwnerID(); ucu.mutation.UserOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "UserCart.user_owner"`)
	}
	return nil
}

func (ucu *UserCartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ucu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercart.Table, usercart.Columns, sqlgraph.NewFieldSpec(usercart.FieldID, field.TypeUUID))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ucu.mutation.UserOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usercart.UserOwnerTable,
			Columns: []string{usercart.UserOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.UserOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usercart.UserOwnerTable,
			Columns: []string{usercart.UserOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucu.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercart.CartsTable,
			Columns: []string{usercart.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.RemovedCartsIDs(); len(nodes) > 0 && !ucu.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercart.CartsTable,
			Columns: []string{usercart.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercart.CartsTable,
			Columns: []string{usercart.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UserCartUpdateOne is the builder for updating a single UserCart entity.
type UserCartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserCartMutation
}

// SetUserID sets the "user_id" field.
func (ucuo *UserCartUpdateOne) SetUserID(u uuid.UUID) *UserCartUpdateOne {
	ucuo.mutation.SetUserID(u)
	return ucuo
}

// SetUserOwnerID sets the "user_owner" edge to the User entity by ID.
func (ucuo *UserCartUpdateOne) SetUserOwnerID(id uuid.UUID) *UserCartUpdateOne {
	ucuo.mutation.SetUserOwnerID(id)
	return ucuo
}

// SetUserOwner sets the "user_owner" edge to the User entity.
func (ucuo *UserCartUpdateOne) SetUserOwner(u *User) *UserCartUpdateOne {
	return ucuo.SetUserOwnerID(u.ID)
}

// AddCartIDs adds the "carts" edge to the Cart entity by IDs.
func (ucuo *UserCartUpdateOne) AddCartIDs(ids ...uuid.UUID) *UserCartUpdateOne {
	ucuo.mutation.AddCartIDs(ids...)
	return ucuo
}

// AddCarts adds the "carts" edges to the Cart entity.
func (ucuo *UserCartUpdateOne) AddCarts(c ...*Cart) *UserCartUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucuo.AddCartIDs(ids...)
}

// Mutation returns the UserCartMutation object of the builder.
func (ucuo *UserCartUpdateOne) Mutation() *UserCartMutation {
	return ucuo.mutation
}

// ClearUserOwner clears the "user_owner" edge to the User entity.
func (ucuo *UserCartUpdateOne) ClearUserOwner() *UserCartUpdateOne {
	ucuo.mutation.ClearUserOwner()
	return ucuo
}

// ClearCarts clears all "carts" edges to the Cart entity.
func (ucuo *UserCartUpdateOne) ClearCarts() *UserCartUpdateOne {
	ucuo.mutation.ClearCarts()
	return ucuo
}

// RemoveCartIDs removes the "carts" edge to Cart entities by IDs.
func (ucuo *UserCartUpdateOne) RemoveCartIDs(ids ...uuid.UUID) *UserCartUpdateOne {
	ucuo.mutation.RemoveCartIDs(ids...)
	return ucuo
}

// RemoveCarts removes "carts" edges to Cart entities.
func (ucuo *UserCartUpdateOne) RemoveCarts(c ...*Cart) *UserCartUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ucuo.RemoveCartIDs(ids...)
}

// Where appends a list predicates to the UserCartUpdate builder.
func (ucuo *UserCartUpdateOne) Where(ps ...predicate.UserCart) *UserCartUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserCartUpdateOne) Select(field string, fields ...string) *UserCartUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserCart entity.
func (ucuo *UserCartUpdateOne) Save(ctx context.Context) (*UserCart, error) {
	return withHooks(ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserCartUpdateOne) SaveX(ctx context.Context) *UserCart {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserCartUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserCartUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucuo *UserCartUpdateOne) check() error {
	if _, ok := ucuo.mutation.UserOwnerID(); ucuo.mutation.UserOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "UserCart.user_owner"`)
	}
	return nil
}

func (ucuo *UserCartUpdateOne) sqlSave(ctx context.Context) (_node *UserCart, err error) {
	if err := ucuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercart.Table, usercart.Columns, sqlgraph.NewFieldSpec(usercart.FieldID, field.TypeUUID))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserCart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercart.FieldID)
		for _, f := range fields {
			if !usercart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != usercart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ucuo.mutation.UserOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usercart.UserOwnerTable,
			Columns: []string{usercart.UserOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.UserOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usercart.UserOwnerTable,
			Columns: []string{usercart.UserOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucuo.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercart.CartsTable,
			Columns: []string{usercart.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.RemovedCartsIDs(); len(nodes) > 0 && !ucuo.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercart.CartsTable,
			Columns: []string{usercart.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercart.CartsTable,
			Columns: []string{usercart.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserCart{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
