// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/predicate"
	"github.com/kx-boutique/ent/generated/usercart"
)

// UserCartUpdate is the builder for updating UserCart entities.
type UserCartUpdate struct {
	config
	hooks    []Hook
	mutation *UserCartMutation
}

// Where appends a list predicates to the UserCartUpdate builder.
func (ucu *UserCartUpdate) Where(ps ...predicate.UserCart) *UserCartUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetUserID sets the "user_id" field.
func (ucu *UserCartUpdate) SetUserID(u uuid.UUID) *UserCartUpdate {
	ucu.mutation.SetUserID(u)
	return ucu
}

// Mutation returns the UserCartMutation object of the builder.
func (ucu *UserCartUpdate) Mutation() *UserCartMutation {
	return ucu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserCartUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserCartUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserCartUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserCartUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucu *UserCartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usercart.Table, usercart.Columns, sqlgraph.NewFieldSpec(usercart.FieldID, field.TypeUUID))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.UserID(); ok {
		_spec.SetField(usercart.FieldUserID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UserCartUpdateOne is the builder for updating a single UserCart entity.
type UserCartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserCartMutation
}

// SetUserID sets the "user_id" field.
func (ucuo *UserCartUpdateOne) SetUserID(u uuid.UUID) *UserCartUpdateOne {
	ucuo.mutation.SetUserID(u)
	return ucuo
}

// Mutation returns the UserCartMutation object of the builder.
func (ucuo *UserCartUpdateOne) Mutation() *UserCartMutation {
	return ucuo.mutation
}

// Where appends a list predicates to the UserCartUpdate builder.
func (ucuo *UserCartUpdateOne) Where(ps ...predicate.UserCart) *UserCartUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserCartUpdateOne) Select(field string, fields ...string) *UserCartUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserCart entity.
func (ucuo *UserCartUpdateOne) Save(ctx context.Context) (*UserCart, error) {
	return withHooks(ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserCartUpdateOne) SaveX(ctx context.Context) *UserCart {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserCartUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserCartUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucuo *UserCartUpdateOne) sqlSave(ctx context.Context) (_node *UserCart, err error) {
	_spec := sqlgraph.NewUpdateSpec(usercart.Table, usercart.Columns, sqlgraph.NewFieldSpec(usercart.FieldID, field.TypeUUID))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserCart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercart.FieldID)
		for _, f := range fields {
			if !usercart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != usercart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.UserID(); ok {
		_spec.SetField(usercart.FieldUserID, field.TypeUUID, value)
	}
	_node = &UserCart{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
