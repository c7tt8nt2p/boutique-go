// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/auth"
	"github.com/kx-boutique/ent/generated/predicate"
	"github.com/kx-boutique/ent/generated/user"
)

// AuthUpdate is the builder for updating Auth entities.
type AuthUpdate struct {
	config
	hooks    []Hook
	mutation *AuthMutation
}

// Where appends a list predicates to the AuthUpdate builder.
func (au *AuthUpdate) Where(ps ...predicate.Auth) *AuthUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AuthUpdate) SetUserID(u uuid.UUID) *AuthUpdate {
	au.mutation.SetUserID(u)
	return au
}

// SetPasswordHash sets the "password_hash" field.
func (au *AuthUpdate) SetPasswordHash(s string) *AuthUpdate {
	au.mutation.SetPasswordHash(s)
	return au
}

// SetUserIDOwnerID sets the "user_id_owner" edge to the User entity by ID.
func (au *AuthUpdate) SetUserIDOwnerID(id uuid.UUID) *AuthUpdate {
	au.mutation.SetUserIDOwnerID(id)
	return au
}

// SetUserIDOwner sets the "user_id_owner" edge to the User entity.
func (au *AuthUpdate) SetUserIDOwner(u *User) *AuthUpdate {
	return au.SetUserIDOwnerID(u.ID)
}

// Mutation returns the AuthMutation object of the builder.
func (au *AuthUpdate) Mutation() *AuthMutation {
	return au.mutation
}

// ClearUserIDOwner clears the "user_id_owner" edge to the User entity.
func (au *AuthUpdate) ClearUserIDOwner() *AuthUpdate {
	au.mutation.ClearUserIDOwner()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AuthUpdate) check() error {
	if _, ok := au.mutation.UserIDOwnerID(); au.mutation.UserIDOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Auth.user_id_owner"`)
	}
	return nil
}

func (au *AuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(auth.Table, auth.Columns, sqlgraph.NewFieldSpec(auth.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.PasswordHash(); ok {
		_spec.SetField(auth.FieldPasswordHash, field.TypeString, value)
	}
	if au.mutation.UserIDOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   auth.UserIDOwnerTable,
			Columns: []string{auth.UserIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   auth.UserIDOwnerTable,
			Columns: []string{auth.UserIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthUpdateOne is the builder for updating a single Auth entity.
type AuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthMutation
}

// SetUserID sets the "user_id" field.
func (auo *AuthUpdateOne) SetUserID(u uuid.UUID) *AuthUpdateOne {
	auo.mutation.SetUserID(u)
	return auo
}

// SetPasswordHash sets the "password_hash" field.
func (auo *AuthUpdateOne) SetPasswordHash(s string) *AuthUpdateOne {
	auo.mutation.SetPasswordHash(s)
	return auo
}

// SetUserIDOwnerID sets the "user_id_owner" edge to the User entity by ID.
func (auo *AuthUpdateOne) SetUserIDOwnerID(id uuid.UUID) *AuthUpdateOne {
	auo.mutation.SetUserIDOwnerID(id)
	return auo
}

// SetUserIDOwner sets the "user_id_owner" edge to the User entity.
func (auo *AuthUpdateOne) SetUserIDOwner(u *User) *AuthUpdateOne {
	return auo.SetUserIDOwnerID(u.ID)
}

// Mutation returns the AuthMutation object of the builder.
func (auo *AuthUpdateOne) Mutation() *AuthMutation {
	return auo.mutation
}

// ClearUserIDOwner clears the "user_id_owner" edge to the User entity.
func (auo *AuthUpdateOne) ClearUserIDOwner() *AuthUpdateOne {
	auo.mutation.ClearUserIDOwner()
	return auo
}

// Where appends a list predicates to the AuthUpdate builder.
func (auo *AuthUpdateOne) Where(ps ...predicate.Auth) *AuthUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthUpdateOne) Select(field string, fields ...string) *AuthUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Auth entity.
func (auo *AuthUpdateOne) Save(ctx context.Context) (*Auth, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthUpdateOne) SaveX(ctx context.Context) *Auth {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AuthUpdateOne) check() error {
	if _, ok := auo.mutation.UserIDOwnerID(); auo.mutation.UserIDOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Auth.user_id_owner"`)
	}
	return nil
}

func (auo *AuthUpdateOne) sqlSave(ctx context.Context) (_node *Auth, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(auth.Table, auth.Columns, sqlgraph.NewFieldSpec(auth.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Auth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auth.FieldID)
		for _, f := range fields {
			if !auth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != auth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.PasswordHash(); ok {
		_spec.SetField(auth.FieldPasswordHash, field.TypeString, value)
	}
	if auo.mutation.UserIDOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   auth.UserIDOwnerTable,
			Columns: []string{auth.UserIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   auth.UserIDOwnerTable,
			Columns: []string{auth.UserIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Auth{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
