// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/cartitem"
	"github.com/kx-boutique/ent/generated/checkout"
	"github.com/kx-boutique/ent/generated/checkoutitem"
	"github.com/kx-boutique/ent/generated/predicate"
)

// CheckoutItemUpdate is the builder for updating CheckoutItem entities.
type CheckoutItemUpdate struct {
	config
	hooks    []Hook
	mutation *CheckoutItemMutation
}

// Where appends a list predicates to the CheckoutItemUpdate builder.
func (ciu *CheckoutItemUpdate) Where(ps ...predicate.CheckoutItem) *CheckoutItemUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetCheckoutID sets the "checkout_id" field.
func (ciu *CheckoutItemUpdate) SetCheckoutID(u uuid.UUID) *CheckoutItemUpdate {
	ciu.mutation.SetCheckoutID(u)
	return ciu
}

// SetCartItemID sets the "cart_item_id" field.
func (ciu *CheckoutItemUpdate) SetCartItemID(u uuid.UUID) *CheckoutItemUpdate {
	ciu.mutation.SetCartItemID(u)
	return ciu
}

// SetCheckoutIDOwnerID sets the "checkout_id_owner" edge to the Checkout entity by ID.
func (ciu *CheckoutItemUpdate) SetCheckoutIDOwnerID(id uuid.UUID) *CheckoutItemUpdate {
	ciu.mutation.SetCheckoutIDOwnerID(id)
	return ciu
}

// SetCheckoutIDOwner sets the "checkout_id_owner" edge to the Checkout entity.
func (ciu *CheckoutItemUpdate) SetCheckoutIDOwner(c *Checkout) *CheckoutItemUpdate {
	return ciu.SetCheckoutIDOwnerID(c.ID)
}

// SetCartItemIDOwnerID sets the "cart_item_id_owner" edge to the CartItem entity by ID.
func (ciu *CheckoutItemUpdate) SetCartItemIDOwnerID(id uuid.UUID) *CheckoutItemUpdate {
	ciu.mutation.SetCartItemIDOwnerID(id)
	return ciu
}

// SetCartItemIDOwner sets the "cart_item_id_owner" edge to the CartItem entity.
func (ciu *CheckoutItemUpdate) SetCartItemIDOwner(c *CartItem) *CheckoutItemUpdate {
	return ciu.SetCartItemIDOwnerID(c.ID)
}

// Mutation returns the CheckoutItemMutation object of the builder.
func (ciu *CheckoutItemUpdate) Mutation() *CheckoutItemMutation {
	return ciu.mutation
}

// ClearCheckoutIDOwner clears the "checkout_id_owner" edge to the Checkout entity.
func (ciu *CheckoutItemUpdate) ClearCheckoutIDOwner() *CheckoutItemUpdate {
	ciu.mutation.ClearCheckoutIDOwner()
	return ciu
}

// ClearCartItemIDOwner clears the "cart_item_id_owner" edge to the CartItem entity.
func (ciu *CheckoutItemUpdate) ClearCartItemIDOwner() *CheckoutItemUpdate {
	ciu.mutation.ClearCartItemIDOwner()
	return ciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CheckoutItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CheckoutItemUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CheckoutItemUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CheckoutItemUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *CheckoutItemUpdate) check() error {
	if _, ok := ciu.mutation.CheckoutIDOwnerID(); ciu.mutation.CheckoutIDOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CheckoutItem.checkout_id_owner"`)
	}
	if _, ok := ciu.mutation.CartItemIDOwnerID(); ciu.mutation.CartItemIDOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CheckoutItem.cart_item_id_owner"`)
	}
	return nil
}

func (ciu *CheckoutItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ciu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(checkoutitem.Table, checkoutitem.Columns, sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ciu.mutation.CheckoutIDOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutitem.CheckoutIDOwnerTable,
			Columns: []string{checkoutitem.CheckoutIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CheckoutIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutitem.CheckoutIDOwnerTable,
			Columns: []string{checkoutitem.CheckoutIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.CartItemIDOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkoutitem.CartItemIDOwnerTable,
			Columns: []string{checkoutitem.CartItemIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CartItemIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkoutitem.CartItemIDOwnerTable,
			Columns: []string{checkoutitem.CartItemIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkoutitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// CheckoutItemUpdateOne is the builder for updating a single CheckoutItem entity.
type CheckoutItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CheckoutItemMutation
}

// SetCheckoutID sets the "checkout_id" field.
func (ciuo *CheckoutItemUpdateOne) SetCheckoutID(u uuid.UUID) *CheckoutItemUpdateOne {
	ciuo.mutation.SetCheckoutID(u)
	return ciuo
}

// SetCartItemID sets the "cart_item_id" field.
func (ciuo *CheckoutItemUpdateOne) SetCartItemID(u uuid.UUID) *CheckoutItemUpdateOne {
	ciuo.mutation.SetCartItemID(u)
	return ciuo
}

// SetCheckoutIDOwnerID sets the "checkout_id_owner" edge to the Checkout entity by ID.
func (ciuo *CheckoutItemUpdateOne) SetCheckoutIDOwnerID(id uuid.UUID) *CheckoutItemUpdateOne {
	ciuo.mutation.SetCheckoutIDOwnerID(id)
	return ciuo
}

// SetCheckoutIDOwner sets the "checkout_id_owner" edge to the Checkout entity.
func (ciuo *CheckoutItemUpdateOne) SetCheckoutIDOwner(c *Checkout) *CheckoutItemUpdateOne {
	return ciuo.SetCheckoutIDOwnerID(c.ID)
}

// SetCartItemIDOwnerID sets the "cart_item_id_owner" edge to the CartItem entity by ID.
func (ciuo *CheckoutItemUpdateOne) SetCartItemIDOwnerID(id uuid.UUID) *CheckoutItemUpdateOne {
	ciuo.mutation.SetCartItemIDOwnerID(id)
	return ciuo
}

// SetCartItemIDOwner sets the "cart_item_id_owner" edge to the CartItem entity.
func (ciuo *CheckoutItemUpdateOne) SetCartItemIDOwner(c *CartItem) *CheckoutItemUpdateOne {
	return ciuo.SetCartItemIDOwnerID(c.ID)
}

// Mutation returns the CheckoutItemMutation object of the builder.
func (ciuo *CheckoutItemUpdateOne) Mutation() *CheckoutItemMutation {
	return ciuo.mutation
}

// ClearCheckoutIDOwner clears the "checkout_id_owner" edge to the Checkout entity.
func (ciuo *CheckoutItemUpdateOne) ClearCheckoutIDOwner() *CheckoutItemUpdateOne {
	ciuo.mutation.ClearCheckoutIDOwner()
	return ciuo
}

// ClearCartItemIDOwner clears the "cart_item_id_owner" edge to the CartItem entity.
func (ciuo *CheckoutItemUpdateOne) ClearCartItemIDOwner() *CheckoutItemUpdateOne {
	ciuo.mutation.ClearCartItemIDOwner()
	return ciuo
}

// Where appends a list predicates to the CheckoutItemUpdate builder.
func (ciuo *CheckoutItemUpdateOne) Where(ps ...predicate.CheckoutItem) *CheckoutItemUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CheckoutItemUpdateOne) Select(field string, fields ...string) *CheckoutItemUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CheckoutItem entity.
func (ciuo *CheckoutItemUpdateOne) Save(ctx context.Context) (*CheckoutItem, error) {
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CheckoutItemUpdateOne) SaveX(ctx context.Context) *CheckoutItem {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CheckoutItemUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CheckoutItemUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *CheckoutItemUpdateOne) check() error {
	if _, ok := ciuo.mutation.CheckoutIDOwnerID(); ciuo.mutation.CheckoutIDOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CheckoutItem.checkout_id_owner"`)
	}
	if _, ok := ciuo.mutation.CartItemIDOwnerID(); ciuo.mutation.CartItemIDOwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CheckoutItem.cart_item_id_owner"`)
	}
	return nil
}

func (ciuo *CheckoutItemUpdateOne) sqlSave(ctx context.Context) (_node *CheckoutItem, err error) {
	if err := ciuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(checkoutitem.Table, checkoutitem.Columns, sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CheckoutItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, checkoutitem.FieldID)
		for _, f := range fields {
			if !checkoutitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != checkoutitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ciuo.mutation.CheckoutIDOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutitem.CheckoutIDOwnerTable,
			Columns: []string{checkoutitem.CheckoutIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CheckoutIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutitem.CheckoutIDOwnerTable,
			Columns: []string{checkoutitem.CheckoutIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.CartItemIDOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkoutitem.CartItemIDOwnerTable,
			Columns: []string{checkoutitem.CartItemIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CartItemIDOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkoutitem.CartItemIDOwnerTable,
			Columns: []string{checkoutitem.CartItemIDOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CheckoutItem{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkoutitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
