// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/cart"
	"github.com/kx-boutique/ent/generated/product"
	"github.com/kx-boutique/ent/generated/usercart"
)

// Cart is the model entity for the Cart schema.
type Cart struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CartID holds the value of the "cart_id" field.
	CartID uuid.UUID `json:"cart_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID uuid.UUID `json:"product_id,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty int64 `json:"qty,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartQuery when eager-loading is set.
	Edges        CartEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CartEdges holds the relations/edges for other nodes in the graph.
type CartEdges struct {
	// OwnerCartID holds the value of the owner_cart_id edge.
	OwnerCartID *UserCart `json:"owner_cart_id,omitempty"`
	// OwnerProductID holds the value of the owner_product_id edge.
	OwnerProductID *Product `json:"owner_product_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerCartIDOrErr returns the OwnerCartID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartEdges) OwnerCartIDOrErr() (*UserCart, error) {
	if e.loadedTypes[0] {
		if e.OwnerCartID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: usercart.Label}
		}
		return e.OwnerCartID, nil
	}
	return nil, &NotLoadedError{edge: "owner_cart_id"}
}

// OwnerProductIDOrErr returns the OwnerProductID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartEdges) OwnerProductIDOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.OwnerProductID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.OwnerProductID, nil
	}
	return nil, &NotLoadedError{edge: "owner_product_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cart) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cart.FieldQty:
			values[i] = new(sql.NullInt64)
		case cart.FieldCreatedAt, cart.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case cart.FieldID, cart.FieldCartID, cart.FieldProductID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cart fields.
func (c *Cart) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cart.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cart.FieldCartID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field cart_id", values[i])
			} else if value != nil {
				c.CartID = *value
			}
		case cart.FieldProductID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value != nil {
				c.ProductID = *value
			}
		case cart.FieldQty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				c.Qty = value.Int64
			}
		case cart.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cart.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cart.
// This includes values selected through modifiers, order, etc.
func (c *Cart) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryOwnerCartID queries the "owner_cart_id" edge of the Cart entity.
func (c *Cart) QueryOwnerCartID() *UserCartQuery {
	return NewCartClient(c.config).QueryOwnerCartID(c)
}

// QueryOwnerProductID queries the "owner_product_id" edge of the Cart entity.
func (c *Cart) QueryOwnerProductID() *ProductQuery {
	return NewCartClient(c.config).QueryOwnerProductID(c)
}

// Update returns a builder for updating this Cart.
// Note that you need to call Cart.Unwrap() before calling this method if this Cart
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cart) Update() *CartUpdateOne {
	return NewCartClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cart entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cart) Unwrap() *Cart {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("generated: Cart is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cart) String() string {
	var builder strings.Builder
	builder.WriteString("Cart(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("cart_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CartID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ProductID))
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", c.Qty))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Carts is a parsable slice of Cart.
type Carts []*Cart
