// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/usercart"
)

// UserCartCreate is the builder for creating a UserCart entity.
type UserCartCreate struct {
	config
	mutation *UserCartMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ucc *UserCartCreate) SetUserID(u uuid.UUID) *UserCartCreate {
	ucc.mutation.SetUserID(u)
	return ucc
}

// SetID sets the "id" field.
func (ucc *UserCartCreate) SetID(u uuid.UUID) *UserCartCreate {
	ucc.mutation.SetID(u)
	return ucc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ucc *UserCartCreate) SetNillableID(u *uuid.UUID) *UserCartCreate {
	if u != nil {
		ucc.SetID(*u)
	}
	return ucc
}

// Mutation returns the UserCartMutation object of the builder.
func (ucc *UserCartCreate) Mutation() *UserCartMutation {
	return ucc.mutation
}

// Save creates the UserCart in the database.
func (ucc *UserCartCreate) Save(ctx context.Context) (*UserCart, error) {
	ucc.defaults()
	return withHooks(ctx, ucc.sqlSave, ucc.mutation, ucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserCartCreate) SaveX(ctx context.Context) *UserCart {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserCartCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserCartCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UserCartCreate) defaults() {
	if _, ok := ucc.mutation.ID(); !ok {
		v := usercart.DefaultID()
		ucc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserCartCreate) check() error {
	if _, ok := ucc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "UserCart.user_id"`)}
	}
	return nil
}

func (ucc *UserCartCreate) sqlSave(ctx context.Context) (*UserCart, error) {
	if err := ucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ucc.mutation.id = &_node.ID
	ucc.mutation.done = true
	return _node, nil
}

func (ucc *UserCartCreate) createSpec() (*UserCart, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCart{config: ucc.config}
		_spec = sqlgraph.NewCreateSpec(usercart.Table, sqlgraph.NewFieldSpec(usercart.FieldID, field.TypeUUID))
	)
	if id, ok := ucc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ucc.mutation.UserID(); ok {
		_spec.SetField(usercart.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	return _node, _spec
}

// UserCartCreateBulk is the builder for creating many UserCart entities in bulk.
type UserCartCreateBulk struct {
	config
	err      error
	builders []*UserCartCreate
}

// Save creates the UserCart entities in the database.
func (uccb *UserCartCreateBulk) Save(ctx context.Context) ([]*UserCart, error) {
	if uccb.err != nil {
		return nil, uccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserCart, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCartMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserCartCreateBulk) SaveX(ctx context.Context) []*UserCart {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserCartCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserCartCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
