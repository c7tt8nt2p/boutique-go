// Code generated by ent, DO NOT EDIT.

package checkoutitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldLTE(FieldID, id))
}

// CheckoutID applies equality check predicate on the "checkout_id" field. It's identical to CheckoutIDEQ.
func CheckoutID(v uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldEQ(FieldCheckoutID, v))
}

// CartItemID applies equality check predicate on the "cart_item_id" field. It's identical to CartItemIDEQ.
func CartItemID(v uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldEQ(FieldCartItemID, v))
}

// CheckoutIDEQ applies the EQ predicate on the "checkout_id" field.
func CheckoutIDEQ(v uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldEQ(FieldCheckoutID, v))
}

// CheckoutIDNEQ applies the NEQ predicate on the "checkout_id" field.
func CheckoutIDNEQ(v uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldNEQ(FieldCheckoutID, v))
}

// CheckoutIDIn applies the In predicate on the "checkout_id" field.
func CheckoutIDIn(vs ...uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldIn(FieldCheckoutID, vs...))
}

// CheckoutIDNotIn applies the NotIn predicate on the "checkout_id" field.
func CheckoutIDNotIn(vs ...uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldNotIn(FieldCheckoutID, vs...))
}

// CartItemIDEQ applies the EQ predicate on the "cart_item_id" field.
func CartItemIDEQ(v uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldEQ(FieldCartItemID, v))
}

// CartItemIDNEQ applies the NEQ predicate on the "cart_item_id" field.
func CartItemIDNEQ(v uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldNEQ(FieldCartItemID, v))
}

// CartItemIDIn applies the In predicate on the "cart_item_id" field.
func CartItemIDIn(vs ...uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldIn(FieldCartItemID, vs...))
}

// CartItemIDNotIn applies the NotIn predicate on the "cart_item_id" field.
func CartItemIDNotIn(vs ...uuid.UUID) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.FieldNotIn(FieldCartItemID, vs...))
}

// HasCheckoutIDOwner applies the HasEdge predicate on the "checkout_id_owner" edge.
func HasCheckoutIDOwner() predicate.CheckoutItem {
	return predicate.CheckoutItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CheckoutIDOwnerTable, CheckoutIDOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCheckoutIDOwnerWith applies the HasEdge predicate on the "checkout_id_owner" edge with a given conditions (other predicates).
func HasCheckoutIDOwnerWith(preds ...predicate.Checkout) predicate.CheckoutItem {
	return predicate.CheckoutItem(func(s *sql.Selector) {
		step := newCheckoutIDOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCartItemIDOwner applies the HasEdge predicate on the "cart_item_id_owner" edge.
func HasCartItemIDOwner() predicate.CheckoutItem {
	return predicate.CheckoutItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CartItemIDOwnerTable, CartItemIDOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCartItemIDOwnerWith applies the HasEdge predicate on the "cart_item_id_owner" edge with a given conditions (other predicates).
func HasCartItemIDOwnerWith(preds ...predicate.CartItem) predicate.CheckoutItem {
	return predicate.CheckoutItem(func(s *sql.Selector) {
		step := newCartItemIDOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CheckoutItem) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CheckoutItem) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CheckoutItem) predicate.CheckoutItem {
	return predicate.CheckoutItem(sql.NotPredicates(p))
}
