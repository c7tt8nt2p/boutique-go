// Code generated by ent, DO NOT EDIT.

package checkoutitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the checkoutitem type in the database.
	Label = "checkout_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCheckoutID holds the string denoting the checkout_id field in the database.
	FieldCheckoutID = "checkout_id"
	// FieldCartItemID holds the string denoting the cart_item_id field in the database.
	FieldCartItemID = "cart_item_id"
	// EdgeCheckoutIDOwner holds the string denoting the checkout_id_owner edge name in mutations.
	EdgeCheckoutIDOwner = "checkout_id_owner"
	// EdgeCartItemIDOwner holds the string denoting the cart_item_id_owner edge name in mutations.
	EdgeCartItemIDOwner = "cart_item_id_owner"
	// Table holds the table name of the checkoutitem in the database.
	Table = "checkout_items"
	// CheckoutIDOwnerTable is the table that holds the checkout_id_owner relation/edge.
	CheckoutIDOwnerTable = "checkout_items"
	// CheckoutIDOwnerInverseTable is the table name for the Checkout entity.
	// It exists in this package in order to avoid circular dependency with the "checkout" package.
	CheckoutIDOwnerInverseTable = "checkouts"
	// CheckoutIDOwnerColumn is the table column denoting the checkout_id_owner relation/edge.
	CheckoutIDOwnerColumn = "checkout_id"
	// CartItemIDOwnerTable is the table that holds the cart_item_id_owner relation/edge.
	CartItemIDOwnerTable = "checkout_items"
	// CartItemIDOwnerInverseTable is the table name for the CartItem entity.
	// It exists in this package in order to avoid circular dependency with the "cartitem" package.
	CartItemIDOwnerInverseTable = "cart_items"
	// CartItemIDOwnerColumn is the table column denoting the cart_item_id_owner relation/edge.
	CartItemIDOwnerColumn = "cart_item_id"
)

// Columns holds all SQL columns for checkoutitem fields.
var Columns = []string{
	FieldID,
	FieldCheckoutID,
	FieldCartItemID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the CheckoutItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCheckoutID orders the results by the checkout_id field.
func ByCheckoutID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckoutID, opts...).ToFunc()
}

// ByCartItemID orders the results by the cart_item_id field.
func ByCartItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCartItemID, opts...).ToFunc()
}

// ByCheckoutIDOwnerField orders the results by checkout_id_owner field.
func ByCheckoutIDOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCheckoutIDOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCartItemIDOwnerField orders the results by cart_item_id_owner field.
func ByCartItemIDOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCartItemIDOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newCheckoutIDOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CheckoutIDOwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CheckoutIDOwnerTable, CheckoutIDOwnerColumn),
	)
}
func newCartItemIDOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CartItemIDOwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CartItemIDOwnerTable, CartItemIDOwnerColumn),
	)
}
