// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/cartitem"
	"github.com/kx-boutique/ent/generated/checkout"
	"github.com/kx-boutique/ent/generated/checkoutitem"
	"github.com/kx-boutique/ent/generated/predicate"
)

// CheckoutItemQuery is the builder for querying CheckoutItem entities.
type CheckoutItemQuery struct {
	config
	ctx                 *QueryContext
	order               []checkoutitem.OrderOption
	inters              []Interceptor
	predicates          []predicate.CheckoutItem
	withCheckoutIDOwner *CheckoutQuery
	withCartItemIDOwner *CartItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CheckoutItemQuery builder.
func (ciq *CheckoutItemQuery) Where(ps ...predicate.CheckoutItem) *CheckoutItemQuery {
	ciq.predicates = append(ciq.predicates, ps...)
	return ciq
}

// Limit the number of records to be returned by this query.
func (ciq *CheckoutItemQuery) Limit(limit int) *CheckoutItemQuery {
	ciq.ctx.Limit = &limit
	return ciq
}

// Offset to start from.
func (ciq *CheckoutItemQuery) Offset(offset int) *CheckoutItemQuery {
	ciq.ctx.Offset = &offset
	return ciq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ciq *CheckoutItemQuery) Unique(unique bool) *CheckoutItemQuery {
	ciq.ctx.Unique = &unique
	return ciq
}

// Order specifies how the records should be ordered.
func (ciq *CheckoutItemQuery) Order(o ...checkoutitem.OrderOption) *CheckoutItemQuery {
	ciq.order = append(ciq.order, o...)
	return ciq
}

// QueryCheckoutIDOwner chains the current query on the "checkout_id_owner" edge.
func (ciq *CheckoutItemQuery) QueryCheckoutIDOwner() *CheckoutQuery {
	query := (&CheckoutClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(checkoutitem.Table, checkoutitem.FieldID, selector),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkoutitem.CheckoutIDOwnerTable, checkoutitem.CheckoutIDOwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCartItemIDOwner chains the current query on the "cart_item_id_owner" edge.
func (ciq *CheckoutItemQuery) QueryCartItemIDOwner() *CartItemQuery {
	query := (&CartItemClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(checkoutitem.Table, checkoutitem.FieldID, selector),
			sqlgraph.To(cartitem.Table, cartitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, checkoutitem.CartItemIDOwnerTable, checkoutitem.CartItemIDOwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CheckoutItem entity from the query.
// Returns a *NotFoundError when no CheckoutItem was found.
func (ciq *CheckoutItemQuery) First(ctx context.Context) (*CheckoutItem, error) {
	nodes, err := ciq.Limit(1).All(setContextOp(ctx, ciq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{checkoutitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ciq *CheckoutItemQuery) FirstX(ctx context.Context) *CheckoutItem {
	node, err := ciq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CheckoutItem ID from the query.
// Returns a *NotFoundError when no CheckoutItem ID was found.
func (ciq *CheckoutItemQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ciq.Limit(1).IDs(setContextOp(ctx, ciq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{checkoutitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ciq *CheckoutItemQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ciq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CheckoutItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CheckoutItem entity is found.
// Returns a *NotFoundError when no CheckoutItem entities are found.
func (ciq *CheckoutItemQuery) Only(ctx context.Context) (*CheckoutItem, error) {
	nodes, err := ciq.Limit(2).All(setContextOp(ctx, ciq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{checkoutitem.Label}
	default:
		return nil, &NotSingularError{checkoutitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ciq *CheckoutItemQuery) OnlyX(ctx context.Context) *CheckoutItem {
	node, err := ciq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CheckoutItem ID in the query.
// Returns a *NotSingularError when more than one CheckoutItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (ciq *CheckoutItemQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ciq.Limit(2).IDs(setContextOp(ctx, ciq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{checkoutitem.Label}
	default:
		err = &NotSingularError{checkoutitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ciq *CheckoutItemQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ciq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CheckoutItems.
func (ciq *CheckoutItemQuery) All(ctx context.Context) ([]*CheckoutItem, error) {
	ctx = setContextOp(ctx, ciq.ctx, "All")
	if err := ciq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CheckoutItem, *CheckoutItemQuery]()
	return withInterceptors[[]*CheckoutItem](ctx, ciq, qr, ciq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ciq *CheckoutItemQuery) AllX(ctx context.Context) []*CheckoutItem {
	nodes, err := ciq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CheckoutItem IDs.
func (ciq *CheckoutItemQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ciq.ctx.Unique == nil && ciq.path != nil {
		ciq.Unique(true)
	}
	ctx = setContextOp(ctx, ciq.ctx, "IDs")
	if err = ciq.Select(checkoutitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ciq *CheckoutItemQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ciq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ciq *CheckoutItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ciq.ctx, "Count")
	if err := ciq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ciq, querierCount[*CheckoutItemQuery](), ciq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ciq *CheckoutItemQuery) CountX(ctx context.Context) int {
	count, err := ciq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ciq *CheckoutItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ciq.ctx, "Exist")
	switch _, err := ciq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ciq *CheckoutItemQuery) ExistX(ctx context.Context) bool {
	exist, err := ciq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CheckoutItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ciq *CheckoutItemQuery) Clone() *CheckoutItemQuery {
	if ciq == nil {
		return nil
	}
	return &CheckoutItemQuery{
		config:              ciq.config,
		ctx:                 ciq.ctx.Clone(),
		order:               append([]checkoutitem.OrderOption{}, ciq.order...),
		inters:              append([]Interceptor{}, ciq.inters...),
		predicates:          append([]predicate.CheckoutItem{}, ciq.predicates...),
		withCheckoutIDOwner: ciq.withCheckoutIDOwner.Clone(),
		withCartItemIDOwner: ciq.withCartItemIDOwner.Clone(),
		// clone intermediate query.
		sql:  ciq.sql.Clone(),
		path: ciq.path,
	}
}

// WithCheckoutIDOwner tells the query-builder to eager-load the nodes that are connected to
// the "checkout_id_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *CheckoutItemQuery) WithCheckoutIDOwner(opts ...func(*CheckoutQuery)) *CheckoutItemQuery {
	query := (&CheckoutClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withCheckoutIDOwner = query
	return ciq
}

// WithCartItemIDOwner tells the query-builder to eager-load the nodes that are connected to
// the "cart_item_id_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *CheckoutItemQuery) WithCartItemIDOwner(opts ...func(*CartItemQuery)) *CheckoutItemQuery {
	query := (&CartItemClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withCartItemIDOwner = query
	return ciq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CheckoutID uuid.UUID `json:"checkout_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CheckoutItem.Query().
//		GroupBy(checkoutitem.FieldCheckoutID).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (ciq *CheckoutItemQuery) GroupBy(field string, fields ...string) *CheckoutItemGroupBy {
	ciq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CheckoutItemGroupBy{build: ciq}
	grbuild.flds = &ciq.ctx.Fields
	grbuild.label = checkoutitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CheckoutID uuid.UUID `json:"checkout_id,omitempty"`
//	}
//
//	client.CheckoutItem.Query().
//		Select(checkoutitem.FieldCheckoutID).
//		Scan(ctx, &v)
func (ciq *CheckoutItemQuery) Select(fields ...string) *CheckoutItemSelect {
	ciq.ctx.Fields = append(ciq.ctx.Fields, fields...)
	sbuild := &CheckoutItemSelect{CheckoutItemQuery: ciq}
	sbuild.label = checkoutitem.Label
	sbuild.flds, sbuild.scan = &ciq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CheckoutItemSelect configured with the given aggregations.
func (ciq *CheckoutItemQuery) Aggregate(fns ...AggregateFunc) *CheckoutItemSelect {
	return ciq.Select().Aggregate(fns...)
}

func (ciq *CheckoutItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ciq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ciq); err != nil {
				return err
			}
		}
	}
	for _, f := range ciq.ctx.Fields {
		if !checkoutitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if ciq.path != nil {
		prev, err := ciq.path(ctx)
		if err != nil {
			return err
		}
		ciq.sql = prev
	}
	return nil
}

func (ciq *CheckoutItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CheckoutItem, error) {
	var (
		nodes       = []*CheckoutItem{}
		_spec       = ciq.querySpec()
		loadedTypes = [2]bool{
			ciq.withCheckoutIDOwner != nil,
			ciq.withCartItemIDOwner != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CheckoutItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CheckoutItem{config: ciq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ciq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ciq.withCheckoutIDOwner; query != nil {
		if err := ciq.loadCheckoutIDOwner(ctx, query, nodes, nil,
			func(n *CheckoutItem, e *Checkout) { n.Edges.CheckoutIDOwner = e }); err != nil {
			return nil, err
		}
	}
	if query := ciq.withCartItemIDOwner; query != nil {
		if err := ciq.loadCartItemIDOwner(ctx, query, nodes, nil,
			func(n *CheckoutItem, e *CartItem) { n.Edges.CartItemIDOwner = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ciq *CheckoutItemQuery) loadCheckoutIDOwner(ctx context.Context, query *CheckoutQuery, nodes []*CheckoutItem, init func(*CheckoutItem), assign func(*CheckoutItem, *Checkout)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CheckoutItem)
	for i := range nodes {
		fk := nodes[i].CheckoutID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(checkout.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "checkout_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ciq *CheckoutItemQuery) loadCartItemIDOwner(ctx context.Context, query *CartItemQuery, nodes []*CheckoutItem, init func(*CheckoutItem), assign func(*CheckoutItem, *CartItem)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CheckoutItem)
	for i := range nodes {
		fk := nodes[i].CartItemID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cartitem.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "cart_item_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ciq *CheckoutItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ciq.querySpec()
	_spec.Node.Columns = ciq.ctx.Fields
	if len(ciq.ctx.Fields) > 0 {
		_spec.Unique = ciq.ctx.Unique != nil && *ciq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ciq.driver, _spec)
}

func (ciq *CheckoutItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(checkoutitem.Table, checkoutitem.Columns, sqlgraph.NewFieldSpec(checkoutitem.FieldID, field.TypeUUID))
	_spec.From = ciq.sql
	if unique := ciq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ciq.path != nil {
		_spec.Unique = true
	}
	if fields := ciq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, checkoutitem.FieldID)
		for i := range fields {
			if fields[i] != checkoutitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ciq.withCheckoutIDOwner != nil {
			_spec.Node.AddColumnOnce(checkoutitem.FieldCheckoutID)
		}
		if ciq.withCartItemIDOwner != nil {
			_spec.Node.AddColumnOnce(checkoutitem.FieldCartItemID)
		}
	}
	if ps := ciq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ciq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ciq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ciq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ciq *CheckoutItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ciq.driver.Dialect())
	t1 := builder.Table(checkoutitem.Table)
	columns := ciq.ctx.Fields
	if len(columns) == 0 {
		columns = checkoutitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ciq.sql != nil {
		selector = ciq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ciq.ctx.Unique != nil && *ciq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ciq.predicates {
		p(selector)
	}
	for _, p := range ciq.order {
		p(selector)
	}
	if offset := ciq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ciq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CheckoutItemGroupBy is the group-by builder for CheckoutItem entities.
type CheckoutItemGroupBy struct {
	selector
	build *CheckoutItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cigb *CheckoutItemGroupBy) Aggregate(fns ...AggregateFunc) *CheckoutItemGroupBy {
	cigb.fns = append(cigb.fns, fns...)
	return cigb
}

// Scan applies the selector query and scans the result into the given value.
func (cigb *CheckoutItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cigb.build.ctx, "GroupBy")
	if err := cigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CheckoutItemQuery, *CheckoutItemGroupBy](ctx, cigb.build, cigb, cigb.build.inters, v)
}

func (cigb *CheckoutItemGroupBy) sqlScan(ctx context.Context, root *CheckoutItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cigb.fns))
	for _, fn := range cigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cigb.flds)+len(cigb.fns))
		for _, f := range *cigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CheckoutItemSelect is the builder for selecting fields of CheckoutItem entities.
type CheckoutItemSelect struct {
	*CheckoutItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cis *CheckoutItemSelect) Aggregate(fns ...AggregateFunc) *CheckoutItemSelect {
	cis.fns = append(cis.fns, fns...)
	return cis
}

// Scan applies the selector query and scans the result into the given value.
func (cis *CheckoutItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cis.ctx, "Select")
	if err := cis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CheckoutItemQuery, *CheckoutItemSelect](ctx, cis.CheckoutItemQuery, cis, cis.inters, v)
}

func (cis *CheckoutItemSelect) sqlScan(ctx context.Context, root *CheckoutItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cis.fns))
	for _, fn := range cis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
