// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kx-boutique/ent/generated/cartitem"
	"github.com/kx-boutique/ent/generated/checkout"
	"github.com/kx-boutique/ent/generated/checkoutitem"
)

// CheckoutItem is the model entity for the CheckoutItem schema.
type CheckoutItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CheckoutID holds the value of the "checkout_id" field.
	CheckoutID uuid.UUID `json:"checkout_id,omitempty"`
	// CartItemID holds the value of the "cart_item_id" field.
	CartItemID uuid.UUID `json:"cart_item_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckoutItemQuery when eager-loading is set.
	Edges        CheckoutItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CheckoutItemEdges holds the relations/edges for other nodes in the graph.
type CheckoutItemEdges struct {
	// CheckoutIDOwner holds the value of the checkout_id_owner edge.
	CheckoutIDOwner *Checkout `json:"checkout_id_owner,omitempty"`
	// CartItemIDOwner holds the value of the cart_item_id_owner edge.
	CartItemIDOwner *CartItem `json:"cart_item_id_owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CheckoutIDOwnerOrErr returns the CheckoutIDOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutItemEdges) CheckoutIDOwnerOrErr() (*Checkout, error) {
	if e.loadedTypes[0] {
		if e.CheckoutIDOwner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: checkout.Label}
		}
		return e.CheckoutIDOwner, nil
	}
	return nil, &NotLoadedError{edge: "checkout_id_owner"}
}

// CartItemIDOwnerOrErr returns the CartItemIDOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutItemEdges) CartItemIDOwnerOrErr() (*CartItem, error) {
	if e.loadedTypes[1] {
		if e.CartItemIDOwner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cartitem.Label}
		}
		return e.CartItemIDOwner, nil
	}
	return nil, &NotLoadedError{edge: "cart_item_id_owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CheckoutItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkoutitem.FieldID, checkoutitem.FieldCheckoutID, checkoutitem.FieldCartItemID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CheckoutItem fields.
func (ci *CheckoutItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkoutitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ci.ID = *value
			}
		case checkoutitem.FieldCheckoutID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field checkout_id", values[i])
			} else if value != nil {
				ci.CheckoutID = *value
			}
		case checkoutitem.FieldCartItemID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field cart_item_id", values[i])
			} else if value != nil {
				ci.CartItemID = *value
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CheckoutItem.
// This includes values selected through modifiers, order, etc.
func (ci *CheckoutItem) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// QueryCheckoutIDOwner queries the "checkout_id_owner" edge of the CheckoutItem entity.
func (ci *CheckoutItem) QueryCheckoutIDOwner() *CheckoutQuery {
	return NewCheckoutItemClient(ci.config).QueryCheckoutIDOwner(ci)
}

// QueryCartItemIDOwner queries the "cart_item_id_owner" edge of the CheckoutItem entity.
func (ci *CheckoutItem) QueryCartItemIDOwner() *CartItemQuery {
	return NewCheckoutItemClient(ci.config).QueryCartItemIDOwner(ci)
}

// Update returns a builder for updating this CheckoutItem.
// Note that you need to call CheckoutItem.Unwrap() before calling this method if this CheckoutItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CheckoutItem) Update() *CheckoutItemUpdateOne {
	return NewCheckoutItemClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the CheckoutItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CheckoutItem) Unwrap() *CheckoutItem {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("generated: CheckoutItem is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CheckoutItem) String() string {
	var builder strings.Builder
	builder.WriteString("CheckoutItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("checkout_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.CheckoutID))
	builder.WriteString(", ")
	builder.WriteString("cart_item_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.CartItemID))
	builder.WriteByte(')')
	return builder.String()
}

// CheckoutItems is a parsable slice of CheckoutItem.
type CheckoutItems []*CheckoutItem
