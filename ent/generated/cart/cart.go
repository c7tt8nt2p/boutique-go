// Code generated by ent, DO NOT EDIT.

package cart

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the cart type in the database.
	Label = "cart"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCartID holds the string denoting the cart_id field in the database.
	FieldCartID = "cart_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldQty holds the string denoting the qty field in the database.
	FieldQty = "qty"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwnerCartID holds the string denoting the owner_cart_id edge name in mutations.
	EdgeOwnerCartID = "owner_cart_id"
	// EdgeOwnerProductID holds the string denoting the owner_product_id edge name in mutations.
	EdgeOwnerProductID = "owner_product_id"
	// Table holds the table name of the cart in the database.
	Table = "carts"
	// OwnerCartIDTable is the table that holds the owner_cart_id relation/edge.
	OwnerCartIDTable = "carts"
	// OwnerCartIDInverseTable is the table name for the UserCart entity.
	// It exists in this package in order to avoid circular dependency with the "usercart" package.
	OwnerCartIDInverseTable = "user_cart"
	// OwnerCartIDColumn is the table column denoting the owner_cart_id relation/edge.
	OwnerCartIDColumn = "cart_id"
	// OwnerProductIDTable is the table that holds the owner_product_id relation/edge.
	OwnerProductIDTable = "carts"
	// OwnerProductIDInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	OwnerProductIDInverseTable = "products"
	// OwnerProductIDColumn is the table column denoting the owner_product_id relation/edge.
	OwnerProductIDColumn = "product_id"
)

// Columns holds all SQL columns for cart fields.
var Columns = []string{
	FieldID,
	FieldCartID,
	FieldProductID,
	FieldQty,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Cart queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCartID orders the results by the cart_id field.
func ByCartID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCartID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByQty orders the results by the qty field.
func ByQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQty, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerCartIDField orders the results by owner_cart_id field.
func ByOwnerCartIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerCartIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerProductIDField orders the results by owner_product_id field.
func ByOwnerProductIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerProductIDStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerCartIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerCartIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerCartIDTable, OwnerCartIDColumn),
	)
}
func newOwnerProductIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerProductIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerProductIDTable, OwnerProductIDColumn),
	)
}
