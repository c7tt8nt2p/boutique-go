// Code generated by ent, DO NOT EDIT.

package cart

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the cart type in the database.
	Label = "cart"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUserIDOwner holds the string denoting the user_id_owner edge name in mutations.
	EdgeUserIDOwner = "user_id_owner"
	// EdgeCartItem holds the string denoting the cart_item edge name in mutations.
	EdgeCartItem = "cart_item"
	// Table holds the table name of the cart in the database.
	Table = "carts"
	// UserIDOwnerTable is the table that holds the user_id_owner relation/edge.
	UserIDOwnerTable = "carts"
	// UserIDOwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserIDOwnerInverseTable = "users"
	// UserIDOwnerColumn is the table column denoting the user_id_owner relation/edge.
	UserIDOwnerColumn = "user_id"
	// CartItemTable is the table that holds the cart_item relation/edge.
	CartItemTable = "cart_items"
	// CartItemInverseTable is the table name for the CartItem entity.
	// It exists in this package in order to avoid circular dependency with the "cartitem" package.
	CartItemInverseTable = "cart_items"
	// CartItemColumn is the table column denoting the cart_item relation/edge.
	CartItemColumn = "cart_id"
)

// Columns holds all SQL columns for cart fields.
var Columns = []string{
	FieldID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Cart queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserIDOwnerField orders the results by user_id_owner field.
func ByUserIDOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIDOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCartItemCount orders the results by cart_item count.
func ByCartItemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCartItemStep(), opts...)
	}
}

// ByCartItem orders the results by cart_item terms.
func ByCartItem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCartItemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserIDOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIDOwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserIDOwnerTable, UserIDOwnerColumn),
	)
}
func newCartItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CartItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CartItemTable, CartItemColumn),
	)
}
