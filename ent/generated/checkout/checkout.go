// Code generated by ent, DO NOT EDIT.

package checkout

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the checkout type in the database.
	Label = "checkout"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTotalPrice holds the string denoting the total_price field in the database.
	FieldTotalPrice = "total_price"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCheckoutItem holds the string denoting the checkout_item edge name in mutations.
	EdgeCheckoutItem = "checkout_item"
	// EdgeUserIDOwner holds the string denoting the user_id_owner edge name in mutations.
	EdgeUserIDOwner = "user_id_owner"
	// Table holds the table name of the checkout in the database.
	Table = "checkouts"
	// CheckoutItemTable is the table that holds the checkout_item relation/edge.
	CheckoutItemTable = "checkout_items"
	// CheckoutItemInverseTable is the table name for the CheckoutItem entity.
	// It exists in this package in order to avoid circular dependency with the "checkoutitem" package.
	CheckoutItemInverseTable = "checkout_items"
	// CheckoutItemColumn is the table column denoting the checkout_item relation/edge.
	CheckoutItemColumn = "checkout_id"
	// UserIDOwnerTable is the table that holds the user_id_owner relation/edge.
	UserIDOwnerTable = "checkouts"
	// UserIDOwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserIDOwnerInverseTable = "users"
	// UserIDOwnerColumn is the table column denoting the user_id_owner relation/edge.
	UserIDOwnerColumn = "user_id"
)

// Columns holds all SQL columns for checkout fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTotalPrice,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Checkout queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTotalPrice orders the results by the total_price field.
func ByTotalPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalPrice, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCheckoutItemCount orders the results by checkout_item count.
func ByCheckoutItemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCheckoutItemStep(), opts...)
	}
}

// ByCheckoutItem orders the results by checkout_item terms.
func ByCheckoutItem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCheckoutItemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserIDOwnerField orders the results by user_id_owner field.
func ByUserIDOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIDOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newCheckoutItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CheckoutItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CheckoutItemTable, CheckoutItemColumn),
	)
}
func newUserIDOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIDOwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserIDOwnerTable, UserIDOwnerColumn),
	)
}
